
/* Create Table Statements for CoffeeShop Database */


CREATE DATABASE IF NOT EXISTS coffee_shop;
USE coffee_shop;


DROP TABLES IF EXISTS ingredient, coffee, tea, baked_good, employee, customer, store;
DROP TRIGGER IF EXISTS unique_emp_login_insert_trigger, unique_emp_login_update_trigger;
DROP TRIGGER IF EXISTS unique_cust_login_insert_trigger, unique_cust_login_update_trigger;
DROP PROCEDURE IF EXISTS unique_emp_login_procedure, unique_cust_login_procedure;


CREATE TABLE baked_good (
    bake_id         INT PRIMARY KEY AUTO_INCREMENT,
    name            VARCHAR(50),
    description     VARCHAR(200),
    price           DECIMAL(10, 2)
);


CREATE TABLE coffee (
    coffee_id       INT PRIMARY KEY AUTO_INCREMENT,
    name            VARCHAR(50),
    description     VARCHAR(200),
    price           DECIMAL(10, 2)
);


CREATE TABLE tea (
    tea_id          INT PRIMARY KEY AUTO_INCREMENT,
    name            VARCHAR(50),
    description     VARCHAR(200),
    price           DECIMAL(10, 2)
);


CREATE TABLE ingredient (
    ingr_id         INT PRIMARY KEY AUTO_INCREMENT,
    name            VARCHAR(50),
    flavor          BOOL NOT NULL,
    bake_id         INT NULL,
    coffee_id       INT NULL,
    tea_id          INT NULL,
    FOREIGN KEY     (coffee_id)
        REFERENCES  coffee(coffee_id)
        ON DELETE CASCADE,
    FOREIGN KEY     (tea_id)
        REFERENCES  tea(tea_id)
        ON DELETE CASCADE,
    FOREIGN KEY     (bake_id)
        REFERENCES  baked_goods(bake_id)
        ON DELETE CASCADE
);


CREATE TABLE store (
    store_id        INT PRIMARY KEY AUTO_INCREMENT,
    address         VARCHAR(100) NOT NULL,
    city            VARCHAR(50) NOT NULL,
    state           VARCHAR(2) NOT NULL,
    zip             INT NOT NULL
);


CREATE TABLE employee (
    emp_id          INT PRIMARY KEY AUTO_INCREMENT,
    store_id        INT NOT NULL,
    emp_login_id    VARCHAR(50) NOT NULL,
    password        VARCHAR(50) NOT NULL,
    first_name      VARCHAR(50) NOT NULL,
    last_name       VARCHAR(50) NOT NULL,
    phone           VARCHAR(10) NOT NULL,
    address         VARCHAR(100) NOT NULL,
    city            VARCHAR(50) NOT NULL,
    state           VARCHAR(2) NOT NULL,
    zip             INT NOT NULL,
    FOREIGN KEY     (store_id)
        REFERENCES  store(store_id)
        ON DELETE CASCADE
);


CREATE TABLE customer (
    cust_id         INT PRIMARY KEY AUTO_INCREMENT,
    store_id        INT NOT NULL,
    cust_login_id   VARCHAR(50) NOT NULL,
    password        VARCHAR(50) NOT NULL,
    first_name      VARCHAR(50) NOT NULL,
    last_name       VARCHAR(50) NOT NULL,
    phone           VARCHAR(10) NOT NULL,
    address         VARCHAR(100) NOT NULL,
    city            VARCHAR(50) NOT NULL,
    state           VARCHAR(2) NOT NULL,
    zip             INT NOT NULL,
    FOREIGN KEY     (store_id)
        REFERENCES  store(store_id)
        ON DELETE CASCADE
);


/*
DELIMITER //

CREATE PROCEDURE unique_emp_login_procedure
    IF (emp_login_id = (SELECT cust_login_id FROM customer, employee WHERE cust_login_id = emp_login_id)) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: Duplicate login_id detected between tables!'
    END IF
END//


CREATE PROCEDURE unique_cust_login_procedure
    IF (cust_login_id = (SELECT emp_login_id FROM customer, employee WHERE cust_login_id = emp_login_id)) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ERROR: Duplicate login_id detected between tables!'
    END IF
END//


CREATE TRIGGER unique_emp_login_insert_trigger BEFORE INSERT ON employee
FOR EACH ROW BEGIN
    CALL unique_emp_login_procedure
END//


DELIMITER ;
*/

